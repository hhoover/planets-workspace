_id: spc_406cc860ac184ba294b9742ab32f5330
type: ApiSpec
parentId: wrk_36cfa3644627485db275affb4f6d04df
modified: 1620931446111
created: 1619321045273
fileName: planets.yaml
contents: >
  openapi: 3.0.2

  info:
    title: Planets
    version: 0.0.3
    description: Simple flask-backed API showing two example API endpoints and added capabilities by integrating it with the Kong API Gateway.
    contact:
      name: Hart Hoover
  servers:
    - url: http://planets.kong.lan
      description: Local project  

      x-kong-plugin-cors:
        config:
          origins:
            - '*'
      x-kong-plugin-rate-limiting-advanced:
        config:
          limit: 
          - 6
          window_size: 
          - 10
          sync_rate: -1
          namespace: random_auto_generated_string
      tags:
        - planets



    
  externalDocs:
    description: GitHub project for the code and information about this API
    url: https://github.com/lornajane/flask-planets-and-webhooks

  paths:
    /planets:
      get:
        operationId: allPlanets
        summary: List all planets
        description: Returns a list of all the planets that are stored in the system.
        tags:
          - planets
        responses:
          '200':
            description: Planets in a list
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/planet"
                    
                examples:
                  response:
                    value:
                      meta_data:
                        api_name: planets
                        result_data:
                          [
                              {
                                  "moons": 0,
                                  "name": "Mercury",
                                  "position": 1
                              },
                              {
                                  "moons": 0,
                                  "name": "Venus",
                                  "position": 2
                              },
                              {
                                  "moons": 1,
                                  "name": "Earth",
                                  "position": 3
                              },
                              {
                                  "moons": 2,
                                  "name": "Mars",
                                  "position": 4
                              },
                              {
                                  "moons": 79,
                                  "name": "Jupiter",
                                  "position": 5
                              },
                              {
                                  "moons": 62,
                                  "name": "Saturn",
                                  "position": 6
                              },
                              {
                                  "moons": 27,
                                  "name": "Uranus",
                                  "position": 7
                              },
                              {
                                  "moons": 14,
                                  "name": "Neptune",
                                  "position": 8
                              }
                          ]
                    
                    

    /planets/{planetId}:
      get:
        operationId: onePlanet
        summary: Fetch one planet by position
        description: Get the data relating to one planet
        tags:
          - planets
        parameters:
        - name: planetId
          in: path
          required: true
          schema:
            type: number
            example: 4
            minimum: 1
            maximum: 8

        responses:
          '200':
            description: Planets in a list
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/planet"
                examples:
                  response:
                    value:
                      meta_data:
                        api_name: planets/{planetId}
                        result_data:
                          {
                              "moons": 1,
                              "name": "Earth",
                              "position": 3
                          }                

  components:
    schemas:
      planet:
        type: object
        properties:
          name:
            type: string
            description: Name of planet
            example: "Saturn"
          position:
            type: number
            description: Order in place from the sun
            example: 6
          moons:
            type: number
            description: Number of moons, according to NASA
            example: 62

  tags:
    - name: planets
      description: API containing solar system data
contentType: yaml
